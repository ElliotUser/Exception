                        Оператора finally.
    Когда генерируется исключение, выполнение метода направляется по нели­нейному
пути, резко изменяющему нормальную последовательность выполнения операторов в теле
метода. В зависимости от того, как написан метод, исключение может даже стать при-
чиной преждевременного возврата из метода. В некоторых методах это может вызвать
серьезные осложнения. Так, если файл открывается в начале метода и закрывается в
конце, то вряд ли кого-нибудь устроит, что код, за­ крывающий файл, будет обойден
механизмом обработки исключений. Для таких непредвиденных обстоятельств и служит
оператор finally.
    Оператор finally образует блок кода, который будет выполнен по заверше­нии блока
операторов try/catch, но перед следующим за ним кодом. Блок оператора finally вы-
полняется независимо от того, сгенерировано ли исключение или нет. Если исключение
сгенерировано, блок оператора finally выполняется, даже при условии, что ни один из
операторов catch не совпадает с этим исключе­нием. В любой момент, когда метод соби-
рается возвратить управление вызываю­щему коду из блока оператора try/catch (через
необработанное исключение или явным образом через оператор return), блок оператора
finally выполняется пе­ред возвратом управления из метода. Это может быть удобно для
закрытия файловых дескрипторов либо освобождения других ресурсов, которые были выде-
лены в начале метода и должны быть освобождены перед возвратом из него. Указывать
оператор finally необязательно, но каждому оператору try требуется хотя бы один
оператор catch или finally.

Пример.
    В программе демонстрируются три метода, возвращающих управление разными способами.
Но ни в одном из них не пропускается выполнения блока оператора finally.
    В данном примере выполнение метода procA() преждевременно прерывается в блоке
оператора try, где генерируется исключение, но блок оператора finally все равно выпол-
няется. Выход из блока оператора try в методе procB() происходит через оператор return,
а блок оператора finally выполняется перед возвратом из метода procB(). В методе
procC() блок оператора try выполняется обычным образом, когда ошибки отсутствуют, но
блок оператора finally выполняется все равно.

Помните! Если блок оператора finally связан с блоком оператора try, то блок оператора
finally будет выполнен по завершении блока оператора try.