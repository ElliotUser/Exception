                        Цепочки исключений.
    Цепочки исключений позволяют связывать одно исключение с другим, чтобы
описывать в последнем причину появления первого. Допустим, в методе ге­нери-
руется исключение типа ArithmeticException в связи с попыткой деления на нуль.
Но истинная причина состоит в ошибке ввода-вывода, которая и приводит к появ-
лению неверного делителя. И хотя этот метод должен сгенерировать исключение
типа ArithmeticException, поскольку произошла именно эта ошибка, тем не менее
вызывающему коду можно также сообщить, что основной причиной дан­ного исключения
служит ошибка ввода-вывода. Цепочки исключений позволяют справиться с этой и
любой другой ситуацией, когда исключения возникают на раз­ ных уровнях.
    Чтобы разрешить цепочки исключений, в класс Throwable были введены два кон-
структора и два метода.

Throwable (Throwable причина_исключения)
Throwable (String сообщение, Throwable причина_исключения)

    В первой форме параметр причина_исключения обозначает исключение, вызвавшее
текущее исключение. Таким образом, параметр причина_исключения обозначает основную
причину, по которой возникло текущее исключение. Вторая форма позволяет указать
описание вместе с причиной исключения. Оба эти кон­структора были введены также в
классы Error, Exception и RuntimeException. Для организации цепочки исключений в
класс Throwable были также введены методы getCause() и initCause().

Throwable getCause()
Throwable initCause(Throwable причина_исключения)

    Метод getCause() возвращает исключение, вызывающее текущее исключение. Если же
такое исключение отсутствует, то возвращается пустое значение null. Метод initCause()
связывает причину_исключения с вызывающим исключением и возвращает ссылку на исключе-
ние. Таким образом, причину можно связать с исключением после его создания. Но причина
исключения может быть установлена только один раз. Следовательно, метод initCause()
можно вызвать для каждого объекта исключения только один раз. Даже если причина исклю-
чения была установлена в конструкторе, ее все равно нельзя установить снова, используя
метод initCause(). Вообще говорят метод initCause() служит для уста­новки причины исклю-
чений из устаревших классов, где оба упомянутых выше до­ полнительных конструктора не
поддерживаются.

Пример.
    В приведенном примере программы демонстрируется применение механизма обработки цепочки
исключений.
    В данном примере исключение верхнего уровня относится к типу NullPointerException.
Это исключение дополнено исключением типа ArithmeticException, по причине которого оно
возникает. Когда исключение верхнего уровня генери­руется в методе demoproc(), оно перехва-
тывается в методе main(), где оно выво­дится, а вслед за ним - исключение, которое послужило
причиной для его появле­ния и которое получается в результате вызова метода getCause().