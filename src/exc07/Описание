                        Создание собственных подклассов исключений.
    Для того чтобы создать класс собственного исключения, достаточно определить его
как производный от класса Exception, который, в свою очередь, является производным
от класса Throwable. В подклассах собственных исключений совсем не обязательно реали-
зовать что-нибудь. Их присутствия в системе типов уже достаточно, чтобы пользоваться
ими как исключениями.
    В классе Exception определяются четыре открытых конструхтора. Первые два констру-
ктора поддерживают цепочки исключений, описываемые в следующем разделе, а два других
показаны в общей форме ниже. В первой форме конструхто­ра создается исключение без опи-
сания, а во второй форме допускается указывать описание исключения.

Exception()
Exception(String сообщение)

    Зачастую указывать описание исключения непосредственно при его создании очень удо-
бно, но иногда для этого лучше переопределить метод toString().

Пример.
    В приведенном ниже примере программы сначала объямяется новый подкласс, производный
от класса Exception, а затем он используется для вывода сообщения об ошибке в методе. В
этом подклассе метод toString() переопределяется таким образом, чтобы вывести тщательно
подготовленное описание исключения.
    В данном примере определяется подкласс MyException, производный от класса Exception.
Этот подкласс достаточно прост: он содержит только конструктор и переопределенный метод
toString(), выводящий значение исключения. В классе ExceptionDemo определяется метод
compute(), генерирующий объект исключе­ния типа MyException. Это исключение генерируется,
когда целочисленный параметр метода compute() принимает значение больше 10. В методе
main() сначала устанамивливается обработчик исключений типа MyException, затем вызывается
метод compute() с правильным (меньше 10) и неправильным (больше 10) значением параметра,
чтобы продемонстрировать оба пути выполнения кода.